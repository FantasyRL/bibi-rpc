// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videohandler

import (
	video "bibi/kitex_gen/video"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PutVideo": kitex.NewMethodInfo(
		putVideoHandler,
		newVideoHandlerPutVideoArgs,
		newVideoHandlerPutVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListVideo": kitex.NewMethodInfo(
		listVideoHandler,
		newVideoHandlerListVideoArgs,
		newVideoHandlerListVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchVideo": kitex.NewMethodInfo(
		searchVideoHandler,
		newVideoHandlerSearchVideoArgs,
		newVideoHandlerSearchVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"HotVideo": kitex.NewMethodInfo(
		hotVideoHandler,
		newVideoHandlerHotVideoArgs,
		newVideoHandlerHotVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoByIdList": kitex.NewMethodInfo(
		getVideoByIdListHandler,
		newVideoHandlerGetVideoByIdListArgs,
		newVideoHandlerGetVideoByIdListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoHandlerServiceInfo                = NewServiceInfo()
	videoHandlerServiceInfoForClient       = NewServiceInfoForClient()
	videoHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoHandlerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoHandlerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoHandler"
	handlerType := (*video.VideoHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func putVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoHandlerPutVideoArgs)
	realResult := result.(*video.VideoHandlerPutVideoResult)
	success, err := handler.(video.VideoHandler).PutVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoHandlerPutVideoArgs() interface{} {
	return video.NewVideoHandlerPutVideoArgs()
}

func newVideoHandlerPutVideoResult() interface{} {
	return video.NewVideoHandlerPutVideoResult()
}

func listVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoHandlerListVideoArgs)
	realResult := result.(*video.VideoHandlerListVideoResult)
	success, err := handler.(video.VideoHandler).ListVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoHandlerListVideoArgs() interface{} {
	return video.NewVideoHandlerListVideoArgs()
}

func newVideoHandlerListVideoResult() interface{} {
	return video.NewVideoHandlerListVideoResult()
}

func searchVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoHandlerSearchVideoArgs)
	realResult := result.(*video.VideoHandlerSearchVideoResult)
	success, err := handler.(video.VideoHandler).SearchVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoHandlerSearchVideoArgs() interface{} {
	return video.NewVideoHandlerSearchVideoArgs()
}

func newVideoHandlerSearchVideoResult() interface{} {
	return video.NewVideoHandlerSearchVideoResult()
}

func hotVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoHandlerHotVideoArgs)
	realResult := result.(*video.VideoHandlerHotVideoResult)
	success, err := handler.(video.VideoHandler).HotVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoHandlerHotVideoArgs() interface{} {
	return video.NewVideoHandlerHotVideoArgs()
}

func newVideoHandlerHotVideoResult() interface{} {
	return video.NewVideoHandlerHotVideoResult()
}

func getVideoByIdListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoHandlerGetVideoByIdListArgs)
	realResult := result.(*video.VideoHandlerGetVideoByIdListResult)
	success, err := handler.(video.VideoHandler).GetVideoByIdList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoHandlerGetVideoByIdListArgs() interface{} {
	return video.NewVideoHandlerGetVideoByIdListArgs()
}

func newVideoHandlerGetVideoByIdListResult() interface{} {
	return video.NewVideoHandlerGetVideoByIdListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PutVideo(ctx context.Context, req *video.PutVideoRequest) (r *video.PutVideoResponse, err error) {
	var _args video.VideoHandlerPutVideoArgs
	_args.Req = req
	var _result video.VideoHandlerPutVideoResult
	if err = p.c.Call(ctx, "PutVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVideo(ctx context.Context, req *video.ListUserVideoRequest) (r *video.ListUserVideoResponse, err error) {
	var _args video.VideoHandlerListVideoArgs
	_args.Req = req
	var _result video.VideoHandlerListVideoResult
	if err = p.c.Call(ctx, "ListVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchVideo(ctx context.Context, req *video.SearchVideoRequest) (r *video.SearchVideoResponse, err error) {
	var _args video.VideoHandlerSearchVideoArgs
	_args.Req = req
	var _result video.VideoHandlerSearchVideoResult
	if err = p.c.Call(ctx, "SearchVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HotVideo(ctx context.Context, req *video.HotVideoRequest) (r *video.HotVideoResponse, err error) {
	var _args video.VideoHandlerHotVideoArgs
	_args.Req = req
	var _result video.VideoHandlerHotVideoResult
	if err = p.c.Call(ctx, "HotVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoByIdList(ctx context.Context, req *video.GetVideoByIdListRequest) (r *video.GetVideoByIdListResponse, err error) {
	var _args video.VideoHandlerGetVideoByIdListArgs
	_args.Req = req
	var _result video.VideoHandlerGetVideoByIdListResult
	if err = p.c.Call(ctx, "GetVideoByIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
