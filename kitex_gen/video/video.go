// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package video

import (
	"bibi/kitex_gen/base"
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type PutVideoRequest struct {
	UserId    int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoFile []byte `thrift:"video_file,2" frugal:"2,default,binary" json:"video_file"`
	Title     string `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Cover     []byte `thrift:"cover,4" frugal:"4,default,binary" json:"cover"`
}

func NewPutVideoRequest() *PutVideoRequest {
	return &PutVideoRequest{}
}

func (p *PutVideoRequest) InitDefault() {
	*p = PutVideoRequest{}
}

func (p *PutVideoRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *PutVideoRequest) GetVideoFile() (v []byte) {
	return p.VideoFile
}

func (p *PutVideoRequest) GetTitle() (v string) {
	return p.Title
}

func (p *PutVideoRequest) GetCover() (v []byte) {
	return p.Cover
}
func (p *PutVideoRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *PutVideoRequest) SetVideoFile(val []byte) {
	p.VideoFile = val
}
func (p *PutVideoRequest) SetTitle(val string) {
	p.Title = val
}
func (p *PutVideoRequest) SetCover(val []byte) {
	p.Cover = val
}

var fieldIDToName_PutVideoRequest = map[int16]string{
	1: "user_id",
	2: "video_file",
	3: "title",
	4: "cover",
}

func (p *PutVideoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PutVideoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PutVideoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *PutVideoRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.VideoFile = []byte(v)
	}
	return nil
}
func (p *PutVideoRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *PutVideoRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Cover = []byte(v)
	}
	return nil
}

func (p *PutVideoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutVideoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PutVideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PutVideoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_file", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.VideoFile)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PutVideoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PutVideoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cover", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Cover)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PutVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutVideoRequest(%+v)", *p)

}

func (p *PutVideoRequest) DeepEqual(ano *PutVideoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoFile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Title) {
		return false
	}
	if !p.Field4DeepEqual(ano.Cover) {
		return false
	}
	return true
}

func (p *PutVideoRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *PutVideoRequest) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.VideoFile, src) != 0 {
		return false
	}
	return true
}
func (p *PutVideoRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *PutVideoRequest) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.Cover, src) != 0 {
		return false
	}
	return true
}

type PutVideoResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewPutVideoResponse() *PutVideoResponse {
	return &PutVideoResponse{}
}

func (p *PutVideoResponse) InitDefault() {
	*p = PutVideoResponse{}
}

var PutVideoResponse_Base_DEFAULT *base.BaseResp

func (p *PutVideoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return PutVideoResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *PutVideoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_PutVideoResponse = map[int16]string{
	1: "base",
}

func (p *PutVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PutVideoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PutVideoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PutVideoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PutVideoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutVideoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PutVideoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PutVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutVideoResponse(%+v)", *p)

}

func (p *PutVideoResponse) DeepEqual(ano *PutVideoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *PutVideoResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListUserVideoRequest struct {
	UserId  int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
}

func NewListUserVideoRequest() *ListUserVideoRequest {
	return &ListUserVideoRequest{}
}

func (p *ListUserVideoRequest) InitDefault() {
	*p = ListUserVideoRequest{}
}

func (p *ListUserVideoRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *ListUserVideoRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ListUserVideoRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *ListUserVideoRequest) SetPageNum(val int64) {
	p.PageNum = val
}

var fieldIDToName_ListUserVideoRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
}

func (p *ListUserVideoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListUserVideoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListUserVideoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *ListUserVideoRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListUserVideoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUserVideoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListUserVideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListUserVideoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListUserVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListUserVideoRequest(%+v)", *p)

}

func (p *ListUserVideoRequest) DeepEqual(ano *ListUserVideoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ListUserVideoRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *ListUserVideoRequest) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

type ListUserVideoResponse struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Count     *int64         `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
	VideoList []*base.Video  `thrift:"video_list,3,optional" frugal:"3,optional,list<base.Video>" json:"video_list,omitempty"`
}

func NewListUserVideoResponse() *ListUserVideoResponse {
	return &ListUserVideoResponse{}
}

func (p *ListUserVideoResponse) InitDefault() {
	*p = ListUserVideoResponse{}
}

var ListUserVideoResponse_Base_DEFAULT *base.BaseResp

func (p *ListUserVideoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return ListUserVideoResponse_Base_DEFAULT
	}
	return p.Base
}

var ListUserVideoResponse_Count_DEFAULT int64

func (p *ListUserVideoResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return ListUserVideoResponse_Count_DEFAULT
	}
	return *p.Count
}

var ListUserVideoResponse_VideoList_DEFAULT []*base.Video

func (p *ListUserVideoResponse) GetVideoList() (v []*base.Video) {
	if !p.IsSetVideoList() {
		return ListUserVideoResponse_VideoList_DEFAULT
	}
	return p.VideoList
}
func (p *ListUserVideoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *ListUserVideoResponse) SetCount(val *int64) {
	p.Count = val
}
func (p *ListUserVideoResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

var fieldIDToName_ListUserVideoResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "video_list",
}

func (p *ListUserVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListUserVideoResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *ListUserVideoResponse) IsSetVideoList() bool {
	return p.VideoList != nil
}

func (p *ListUserVideoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListUserVideoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListUserVideoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ListUserVideoResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}
func (p *ListUserVideoResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoList = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.VideoList = append(p.VideoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListUserVideoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUserVideoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListUserVideoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListUserVideoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListUserVideoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoList() {
		if err = oprot.WriteFieldBegin("video_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoList)); err != nil {
			return err
		}
		for _, v := range p.VideoList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListUserVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListUserVideoResponse(%+v)", *p)

}

func (p *ListUserVideoResponse) DeepEqual(ano *ListUserVideoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoList) {
		return false
	}
	return true
}

func (p *ListUserVideoResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListUserVideoResponse) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *ListUserVideoResponse) Field3DeepEqual(src []*base.Video) bool {

	if len(p.VideoList) != len(src) {
		return false
	}
	for i, v := range p.VideoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SearchVideoRequest struct {
	Param   string `thrift:"param,1" frugal:"1,default,string" json:"param"`
	PageNum int64  `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
}

func NewSearchVideoRequest() *SearchVideoRequest {
	return &SearchVideoRequest{}
}

func (p *SearchVideoRequest) InitDefault() {
	*p = SearchVideoRequest{}
}

func (p *SearchVideoRequest) GetParam() (v string) {
	return p.Param
}

func (p *SearchVideoRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *SearchVideoRequest) SetParam(val string) {
	p.Param = val
}
func (p *SearchVideoRequest) SetPageNum(val int64) {
	p.PageNum = val
}

var fieldIDToName_SearchVideoRequest = map[int16]string{
	1: "param",
	2: "page_num",
}

func (p *SearchVideoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchVideoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchVideoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Param = v
	}
	return nil
}
func (p *SearchVideoRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *SearchVideoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchVideoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchVideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Param); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchVideoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchVideoRequest(%+v)", *p)

}

func (p *SearchVideoRequest) DeepEqual(ano *SearchVideoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Param) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *SearchVideoRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Param, src) != 0 {
		return false
	}
	return true
}
func (p *SearchVideoRequest) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

type SearchVideoResponse struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Count     *int64         `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
	VideoList []*base.Video  `thrift:"video_list,3,optional" frugal:"3,optional,list<base.Video>" json:"video_list,omitempty"`
}

func NewSearchVideoResponse() *SearchVideoResponse {
	return &SearchVideoResponse{}
}

func (p *SearchVideoResponse) InitDefault() {
	*p = SearchVideoResponse{}
}

var SearchVideoResponse_Base_DEFAULT *base.BaseResp

func (p *SearchVideoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return SearchVideoResponse_Base_DEFAULT
	}
	return p.Base
}

var SearchVideoResponse_Count_DEFAULT int64

func (p *SearchVideoResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return SearchVideoResponse_Count_DEFAULT
	}
	return *p.Count
}

var SearchVideoResponse_VideoList_DEFAULT []*base.Video

func (p *SearchVideoResponse) GetVideoList() (v []*base.Video) {
	if !p.IsSetVideoList() {
		return SearchVideoResponse_VideoList_DEFAULT
	}
	return p.VideoList
}
func (p *SearchVideoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *SearchVideoResponse) SetCount(val *int64) {
	p.Count = val
}
func (p *SearchVideoResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

var fieldIDToName_SearchVideoResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "video_list",
}

func (p *SearchVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchVideoResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *SearchVideoResponse) IsSetVideoList() bool {
	return p.VideoList != nil
}

func (p *SearchVideoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchVideoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchVideoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *SearchVideoResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}
func (p *SearchVideoResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoList = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.VideoList = append(p.VideoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchVideoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchVideoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchVideoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchVideoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchVideoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoList() {
		if err = oprot.WriteFieldBegin("video_list", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoList)); err != nil {
			return err
		}
		for _, v := range p.VideoList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchVideoResponse(%+v)", *p)

}

func (p *SearchVideoResponse) DeepEqual(ano *SearchVideoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoList) {
		return false
	}
	return true
}

func (p *SearchVideoResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SearchVideoResponse) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *SearchVideoResponse) Field3DeepEqual(src []*base.Video) bool {

	if len(p.VideoList) != len(src) {
		return false
	}
	for i, v := range p.VideoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type HotVideoRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewHotVideoRequest() *HotVideoRequest {
	return &HotVideoRequest{}
}

func (p *HotVideoRequest) InitDefault() {
	*p = HotVideoRequest{}
}

func (p *HotVideoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *HotVideoRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_HotVideoRequest = map[int16]string{
	1: "user_id",
}

func (p *HotVideoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HotVideoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HotVideoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *HotVideoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HotVideoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HotVideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HotVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotVideoRequest(%+v)", *p)

}

func (p *HotVideoRequest) DeepEqual(ano *HotVideoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *HotVideoRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type HotVideoResponse struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	VideoList []*base.Video  `thrift:"video_list,2,optional" frugal:"2,optional,list<base.Video>" json:"video_list,omitempty"`
}

func NewHotVideoResponse() *HotVideoResponse {
	return &HotVideoResponse{}
}

func (p *HotVideoResponse) InitDefault() {
	*p = HotVideoResponse{}
}

var HotVideoResponse_Base_DEFAULT *base.BaseResp

func (p *HotVideoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return HotVideoResponse_Base_DEFAULT
	}
	return p.Base
}

var HotVideoResponse_VideoList_DEFAULT []*base.Video

func (p *HotVideoResponse) GetVideoList() (v []*base.Video) {
	if !p.IsSetVideoList() {
		return HotVideoResponse_VideoList_DEFAULT
	}
	return p.VideoList
}
func (p *HotVideoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *HotVideoResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

var fieldIDToName_HotVideoResponse = map[int16]string{
	1: "base",
	2: "video_list",
}

func (p *HotVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *HotVideoResponse) IsSetVideoList() bool {
	return p.VideoList != nil
}

func (p *HotVideoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HotVideoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HotVideoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *HotVideoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoList = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.VideoList = append(p.VideoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *HotVideoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HotVideoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HotVideoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HotVideoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoList() {
		if err = oprot.WriteFieldBegin("video_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoList)); err != nil {
			return err
		}
		for _, v := range p.VideoList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *HotVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotVideoResponse(%+v)", *p)

}

func (p *HotVideoResponse) DeepEqual(ano *HotVideoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoList) {
		return false
	}
	return true
}

func (p *HotVideoResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *HotVideoResponse) Field2DeepEqual(src []*base.Video) bool {

	if len(p.VideoList) != len(src) {
		return false
	}
	for i, v := range p.VideoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetVideoByIdListRequest struct {
	VideoIdList []int64 `thrift:"video_id_list,1" frugal:"1,default,list<i64>" json:"video_id_list"`
	UserId      int64   `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewGetVideoByIdListRequest() *GetVideoByIdListRequest {
	return &GetVideoByIdListRequest{}
}

func (p *GetVideoByIdListRequest) InitDefault() {
	*p = GetVideoByIdListRequest{}
}

func (p *GetVideoByIdListRequest) GetVideoIdList() (v []int64) {
	return p.VideoIdList
}

func (p *GetVideoByIdListRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetVideoByIdListRequest) SetVideoIdList(val []int64) {
	p.VideoIdList = val
}
func (p *GetVideoByIdListRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetVideoByIdListRequest = map[int16]string{
	1: "video_id_list",
	2: "user_id",
}

func (p *GetVideoByIdListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoByIdListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoByIdListRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VideoIdList = append(p.VideoIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GetVideoByIdListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetVideoByIdListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoByIdListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoByIdListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VideoIdList)); err != nil {
		return err
	}
	for _, v := range p.VideoIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoByIdListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetVideoByIdListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoByIdListRequest(%+v)", *p)

}

func (p *GetVideoByIdListRequest) DeepEqual(ano *GetVideoByIdListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetVideoByIdListRequest) Field1DeepEqual(src []int64) bool {

	if len(p.VideoIdList) != len(src) {
		return false
	}
	for i, v := range p.VideoIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GetVideoByIdListRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetVideoByIdListResponse struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	VideoList []*base.Video  `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
	Count     int64          `thrift:"count,3" frugal:"3,default,i64" json:"count"`
}

func NewGetVideoByIdListResponse() *GetVideoByIdListResponse {
	return &GetVideoByIdListResponse{}
}

func (p *GetVideoByIdListResponse) InitDefault() {
	*p = GetVideoByIdListResponse{}
}

var GetVideoByIdListResponse_Base_DEFAULT *base.BaseResp

func (p *GetVideoByIdListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetVideoByIdListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVideoByIdListResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}

func (p *GetVideoByIdListResponse) GetCount() (v int64) {
	return p.Count
}
func (p *GetVideoByIdListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetVideoByIdListResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}
func (p *GetVideoByIdListResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_GetVideoByIdListResponse = map[int16]string{
	1: "base",
	2: "video_list",
	3: "count",
}

func (p *GetVideoByIdListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoByIdListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoByIdListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoByIdListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetVideoByIdListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VideoList = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.VideoList = append(p.VideoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GetVideoByIdListResponse) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *GetVideoByIdListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoByIdListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoByIdListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoByIdListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoList)); err != nil {
		return err
	}
	for _, v := range p.VideoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetVideoByIdListResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetVideoByIdListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoByIdListResponse(%+v)", *p)

}

func (p *GetVideoByIdListResponse) DeepEqual(ano *GetVideoByIdListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *GetVideoByIdListResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetVideoByIdListResponse) Field2DeepEqual(src []*base.Video) bool {

	if len(p.VideoList) != len(src) {
		return false
	}
	for i, v := range p.VideoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetVideoByIdListResponse) Field3DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type VideoHandler interface {
	PutVideo(ctx context.Context, req *PutVideoRequest) (r *PutVideoResponse, err error)

	ListVideo(ctx context.Context, req *ListUserVideoRequest) (r *ListUserVideoResponse, err error)

	SearchVideo(ctx context.Context, req *SearchVideoRequest) (r *SearchVideoResponse, err error)

	HotVideo(ctx context.Context, req *HotVideoRequest) (r *HotVideoResponse, err error)

	GetVideoByIdList(ctx context.Context, req *GetVideoByIdListRequest) (r *GetVideoByIdListResponse, err error)
}

type VideoHandlerClient struct {
	c thrift.TClient
}

func NewVideoHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VideoHandlerClient {
	return &VideoHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewVideoHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VideoHandlerClient {
	return &VideoHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewVideoHandlerClient(c thrift.TClient) *VideoHandlerClient {
	return &VideoHandlerClient{
		c: c,
	}
}

func (p *VideoHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *VideoHandlerClient) PutVideo(ctx context.Context, req *PutVideoRequest) (r *PutVideoResponse, err error) {
	var _args VideoHandlerPutVideoArgs
	_args.Req = req
	var _result VideoHandlerPutVideoResult
	if err = p.Client_().Call(ctx, "PutVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoHandlerClient) ListVideo(ctx context.Context, req *ListUserVideoRequest) (r *ListUserVideoResponse, err error) {
	var _args VideoHandlerListVideoArgs
	_args.Req = req
	var _result VideoHandlerListVideoResult
	if err = p.Client_().Call(ctx, "ListVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoHandlerClient) SearchVideo(ctx context.Context, req *SearchVideoRequest) (r *SearchVideoResponse, err error) {
	var _args VideoHandlerSearchVideoArgs
	_args.Req = req
	var _result VideoHandlerSearchVideoResult
	if err = p.Client_().Call(ctx, "SearchVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoHandlerClient) HotVideo(ctx context.Context, req *HotVideoRequest) (r *HotVideoResponse, err error) {
	var _args VideoHandlerHotVideoArgs
	_args.Req = req
	var _result VideoHandlerHotVideoResult
	if err = p.Client_().Call(ctx, "HotVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoHandlerClient) GetVideoByIdList(ctx context.Context, req *GetVideoByIdListRequest) (r *GetVideoByIdListResponse, err error) {
	var _args VideoHandlerGetVideoByIdListArgs
	_args.Req = req
	var _result VideoHandlerGetVideoByIdListResult
	if err = p.Client_().Call(ctx, "GetVideoByIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type VideoHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VideoHandler
}

func (p *VideoHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VideoHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VideoHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVideoHandlerProcessor(handler VideoHandler) *VideoHandlerProcessor {
	self := &VideoHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("PutVideo", &videoHandlerProcessorPutVideo{handler: handler})
	self.AddToProcessorMap("ListVideo", &videoHandlerProcessorListVideo{handler: handler})
	self.AddToProcessorMap("SearchVideo", &videoHandlerProcessorSearchVideo{handler: handler})
	self.AddToProcessorMap("HotVideo", &videoHandlerProcessorHotVideo{handler: handler})
	self.AddToProcessorMap("GetVideoByIdList", &videoHandlerProcessorGetVideoByIdList{handler: handler})
	return self
}
func (p *VideoHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type videoHandlerProcessorPutVideo struct {
	handler VideoHandler
}

func (p *videoHandlerProcessorPutVideo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoHandlerPutVideoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PutVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoHandlerPutVideoResult{}
	var retval *PutVideoResponse
	if retval, err2 = p.handler.PutVideo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PutVideo: "+err2.Error())
		oprot.WriteMessageBegin("PutVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PutVideo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoHandlerProcessorListVideo struct {
	handler VideoHandler
}

func (p *videoHandlerProcessorListVideo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoHandlerListVideoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoHandlerListVideoResult{}
	var retval *ListUserVideoResponse
	if retval, err2 = p.handler.ListVideo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListVideo: "+err2.Error())
		oprot.WriteMessageBegin("ListVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListVideo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoHandlerProcessorSearchVideo struct {
	handler VideoHandler
}

func (p *videoHandlerProcessorSearchVideo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoHandlerSearchVideoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoHandlerSearchVideoResult{}
	var retval *SearchVideoResponse
	if retval, err2 = p.handler.SearchVideo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchVideo: "+err2.Error())
		oprot.WriteMessageBegin("SearchVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchVideo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoHandlerProcessorHotVideo struct {
	handler VideoHandler
}

func (p *videoHandlerProcessorHotVideo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoHandlerHotVideoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HotVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoHandlerHotVideoResult{}
	var retval *HotVideoResponse
	if retval, err2 = p.handler.HotVideo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HotVideo: "+err2.Error())
		oprot.WriteMessageBegin("HotVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HotVideo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoHandlerProcessorGetVideoByIdList struct {
	handler VideoHandler
}

func (p *videoHandlerProcessorGetVideoByIdList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoHandlerGetVideoByIdListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVideoByIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoHandlerGetVideoByIdListResult{}
	var retval *GetVideoByIdListResponse
	if retval, err2 = p.handler.GetVideoByIdList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVideoByIdList: "+err2.Error())
		oprot.WriteMessageBegin("GetVideoByIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVideoByIdList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type VideoHandlerPutVideoArgs struct {
	Req *PutVideoRequest `thrift:"req,1" frugal:"1,default,PutVideoRequest" json:"req"`
}

func NewVideoHandlerPutVideoArgs() *VideoHandlerPutVideoArgs {
	return &VideoHandlerPutVideoArgs{}
}

func (p *VideoHandlerPutVideoArgs) InitDefault() {
	*p = VideoHandlerPutVideoArgs{}
}

var VideoHandlerPutVideoArgs_Req_DEFAULT *PutVideoRequest

func (p *VideoHandlerPutVideoArgs) GetReq() (v *PutVideoRequest) {
	if !p.IsSetReq() {
		return VideoHandlerPutVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoHandlerPutVideoArgs) SetReq(val *PutVideoRequest) {
	p.Req = val
}

var fieldIDToName_VideoHandlerPutVideoArgs = map[int16]string{
	1: "req",
}

func (p *VideoHandlerPutVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoHandlerPutVideoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerPutVideoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerPutVideoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPutVideoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerPutVideoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutVideo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerPutVideoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoHandlerPutVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerPutVideoArgs(%+v)", *p)

}

func (p *VideoHandlerPutVideoArgs) DeepEqual(ano *VideoHandlerPutVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoHandlerPutVideoArgs) Field1DeepEqual(src *PutVideoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerPutVideoResult struct {
	Success *PutVideoResponse `thrift:"success,0,optional" frugal:"0,optional,PutVideoResponse" json:"success,omitempty"`
}

func NewVideoHandlerPutVideoResult() *VideoHandlerPutVideoResult {
	return &VideoHandlerPutVideoResult{}
}

func (p *VideoHandlerPutVideoResult) InitDefault() {
	*p = VideoHandlerPutVideoResult{}
}

var VideoHandlerPutVideoResult_Success_DEFAULT *PutVideoResponse

func (p *VideoHandlerPutVideoResult) GetSuccess() (v *PutVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoHandlerPutVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoHandlerPutVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*PutVideoResponse)
}

var fieldIDToName_VideoHandlerPutVideoResult = map[int16]string{
	0: "success",
}

func (p *VideoHandlerPutVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoHandlerPutVideoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerPutVideoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerPutVideoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPutVideoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerPutVideoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutVideo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerPutVideoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoHandlerPutVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerPutVideoResult(%+v)", *p)

}

func (p *VideoHandlerPutVideoResult) DeepEqual(ano *VideoHandlerPutVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoHandlerPutVideoResult) Field0DeepEqual(src *PutVideoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerListVideoArgs struct {
	Req *ListUserVideoRequest `thrift:"req,1" frugal:"1,default,ListUserVideoRequest" json:"req"`
}

func NewVideoHandlerListVideoArgs() *VideoHandlerListVideoArgs {
	return &VideoHandlerListVideoArgs{}
}

func (p *VideoHandlerListVideoArgs) InitDefault() {
	*p = VideoHandlerListVideoArgs{}
}

var VideoHandlerListVideoArgs_Req_DEFAULT *ListUserVideoRequest

func (p *VideoHandlerListVideoArgs) GetReq() (v *ListUserVideoRequest) {
	if !p.IsSetReq() {
		return VideoHandlerListVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoHandlerListVideoArgs) SetReq(val *ListUserVideoRequest) {
	p.Req = val
}

var fieldIDToName_VideoHandlerListVideoArgs = map[int16]string{
	1: "req",
}

func (p *VideoHandlerListVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoHandlerListVideoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerListVideoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerListVideoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListUserVideoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerListVideoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVideo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerListVideoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoHandlerListVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerListVideoArgs(%+v)", *p)

}

func (p *VideoHandlerListVideoArgs) DeepEqual(ano *VideoHandlerListVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoHandlerListVideoArgs) Field1DeepEqual(src *ListUserVideoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerListVideoResult struct {
	Success *ListUserVideoResponse `thrift:"success,0,optional" frugal:"0,optional,ListUserVideoResponse" json:"success,omitempty"`
}

func NewVideoHandlerListVideoResult() *VideoHandlerListVideoResult {
	return &VideoHandlerListVideoResult{}
}

func (p *VideoHandlerListVideoResult) InitDefault() {
	*p = VideoHandlerListVideoResult{}
}

var VideoHandlerListVideoResult_Success_DEFAULT *ListUserVideoResponse

func (p *VideoHandlerListVideoResult) GetSuccess() (v *ListUserVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoHandlerListVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoHandlerListVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListUserVideoResponse)
}

var fieldIDToName_VideoHandlerListVideoResult = map[int16]string{
	0: "success",
}

func (p *VideoHandlerListVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoHandlerListVideoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerListVideoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerListVideoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListUserVideoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerListVideoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVideo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerListVideoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoHandlerListVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerListVideoResult(%+v)", *p)

}

func (p *VideoHandlerListVideoResult) DeepEqual(ano *VideoHandlerListVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoHandlerListVideoResult) Field0DeepEqual(src *ListUserVideoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerSearchVideoArgs struct {
	Req *SearchVideoRequest `thrift:"req,1" frugal:"1,default,SearchVideoRequest" json:"req"`
}

func NewVideoHandlerSearchVideoArgs() *VideoHandlerSearchVideoArgs {
	return &VideoHandlerSearchVideoArgs{}
}

func (p *VideoHandlerSearchVideoArgs) InitDefault() {
	*p = VideoHandlerSearchVideoArgs{}
}

var VideoHandlerSearchVideoArgs_Req_DEFAULT *SearchVideoRequest

func (p *VideoHandlerSearchVideoArgs) GetReq() (v *SearchVideoRequest) {
	if !p.IsSetReq() {
		return VideoHandlerSearchVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoHandlerSearchVideoArgs) SetReq(val *SearchVideoRequest) {
	p.Req = val
}

var fieldIDToName_VideoHandlerSearchVideoArgs = map[int16]string{
	1: "req",
}

func (p *VideoHandlerSearchVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoHandlerSearchVideoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerSearchVideoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerSearchVideoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSearchVideoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerSearchVideoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchVideo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerSearchVideoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoHandlerSearchVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerSearchVideoArgs(%+v)", *p)

}

func (p *VideoHandlerSearchVideoArgs) DeepEqual(ano *VideoHandlerSearchVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoHandlerSearchVideoArgs) Field1DeepEqual(src *SearchVideoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerSearchVideoResult struct {
	Success *SearchVideoResponse `thrift:"success,0,optional" frugal:"0,optional,SearchVideoResponse" json:"success,omitempty"`
}

func NewVideoHandlerSearchVideoResult() *VideoHandlerSearchVideoResult {
	return &VideoHandlerSearchVideoResult{}
}

func (p *VideoHandlerSearchVideoResult) InitDefault() {
	*p = VideoHandlerSearchVideoResult{}
}

var VideoHandlerSearchVideoResult_Success_DEFAULT *SearchVideoResponse

func (p *VideoHandlerSearchVideoResult) GetSuccess() (v *SearchVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoHandlerSearchVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoHandlerSearchVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchVideoResponse)
}

var fieldIDToName_VideoHandlerSearchVideoResult = map[int16]string{
	0: "success",
}

func (p *VideoHandlerSearchVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoHandlerSearchVideoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerSearchVideoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerSearchVideoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSearchVideoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerSearchVideoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchVideo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerSearchVideoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoHandlerSearchVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerSearchVideoResult(%+v)", *p)

}

func (p *VideoHandlerSearchVideoResult) DeepEqual(ano *VideoHandlerSearchVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoHandlerSearchVideoResult) Field0DeepEqual(src *SearchVideoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerHotVideoArgs struct {
	Req *HotVideoRequest `thrift:"req,1" frugal:"1,default,HotVideoRequest" json:"req"`
}

func NewVideoHandlerHotVideoArgs() *VideoHandlerHotVideoArgs {
	return &VideoHandlerHotVideoArgs{}
}

func (p *VideoHandlerHotVideoArgs) InitDefault() {
	*p = VideoHandlerHotVideoArgs{}
}

var VideoHandlerHotVideoArgs_Req_DEFAULT *HotVideoRequest

func (p *VideoHandlerHotVideoArgs) GetReq() (v *HotVideoRequest) {
	if !p.IsSetReq() {
		return VideoHandlerHotVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoHandlerHotVideoArgs) SetReq(val *HotVideoRequest) {
	p.Req = val
}

var fieldIDToName_VideoHandlerHotVideoArgs = map[int16]string{
	1: "req",
}

func (p *VideoHandlerHotVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoHandlerHotVideoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerHotVideoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerHotVideoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewHotVideoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerHotVideoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HotVideo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerHotVideoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoHandlerHotVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerHotVideoArgs(%+v)", *p)

}

func (p *VideoHandlerHotVideoArgs) DeepEqual(ano *VideoHandlerHotVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoHandlerHotVideoArgs) Field1DeepEqual(src *HotVideoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerHotVideoResult struct {
	Success *HotVideoResponse `thrift:"success,0,optional" frugal:"0,optional,HotVideoResponse" json:"success,omitempty"`
}

func NewVideoHandlerHotVideoResult() *VideoHandlerHotVideoResult {
	return &VideoHandlerHotVideoResult{}
}

func (p *VideoHandlerHotVideoResult) InitDefault() {
	*p = VideoHandlerHotVideoResult{}
}

var VideoHandlerHotVideoResult_Success_DEFAULT *HotVideoResponse

func (p *VideoHandlerHotVideoResult) GetSuccess() (v *HotVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoHandlerHotVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoHandlerHotVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*HotVideoResponse)
}

var fieldIDToName_VideoHandlerHotVideoResult = map[int16]string{
	0: "success",
}

func (p *VideoHandlerHotVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoHandlerHotVideoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerHotVideoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerHotVideoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewHotVideoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerHotVideoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HotVideo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerHotVideoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoHandlerHotVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerHotVideoResult(%+v)", *p)

}

func (p *VideoHandlerHotVideoResult) DeepEqual(ano *VideoHandlerHotVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoHandlerHotVideoResult) Field0DeepEqual(src *HotVideoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerGetVideoByIdListArgs struct {
	Req *GetVideoByIdListRequest `thrift:"req,1" frugal:"1,default,GetVideoByIdListRequest" json:"req"`
}

func NewVideoHandlerGetVideoByIdListArgs() *VideoHandlerGetVideoByIdListArgs {
	return &VideoHandlerGetVideoByIdListArgs{}
}

func (p *VideoHandlerGetVideoByIdListArgs) InitDefault() {
	*p = VideoHandlerGetVideoByIdListArgs{}
}

var VideoHandlerGetVideoByIdListArgs_Req_DEFAULT *GetVideoByIdListRequest

func (p *VideoHandlerGetVideoByIdListArgs) GetReq() (v *GetVideoByIdListRequest) {
	if !p.IsSetReq() {
		return VideoHandlerGetVideoByIdListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoHandlerGetVideoByIdListArgs) SetReq(val *GetVideoByIdListRequest) {
	p.Req = val
}

var fieldIDToName_VideoHandlerGetVideoByIdListArgs = map[int16]string{
	1: "req",
}

func (p *VideoHandlerGetVideoByIdListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoHandlerGetVideoByIdListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerGetVideoByIdListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetVideoByIdListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerGetVideoByIdListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoByIdList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerGetVideoByIdListArgs(%+v)", *p)

}

func (p *VideoHandlerGetVideoByIdListArgs) DeepEqual(ano *VideoHandlerGetVideoByIdListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoHandlerGetVideoByIdListArgs) Field1DeepEqual(src *GetVideoByIdListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VideoHandlerGetVideoByIdListResult struct {
	Success *GetVideoByIdListResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoByIdListResponse" json:"success,omitempty"`
}

func NewVideoHandlerGetVideoByIdListResult() *VideoHandlerGetVideoByIdListResult {
	return &VideoHandlerGetVideoByIdListResult{}
}

func (p *VideoHandlerGetVideoByIdListResult) InitDefault() {
	*p = VideoHandlerGetVideoByIdListResult{}
}

var VideoHandlerGetVideoByIdListResult_Success_DEFAULT *GetVideoByIdListResponse

func (p *VideoHandlerGetVideoByIdListResult) GetSuccess() (v *GetVideoByIdListResponse) {
	if !p.IsSetSuccess() {
		return VideoHandlerGetVideoByIdListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoHandlerGetVideoByIdListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoByIdListResponse)
}

var fieldIDToName_VideoHandlerGetVideoByIdListResult = map[int16]string{
	0: "success",
}

func (p *VideoHandlerGetVideoByIdListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoHandlerGetVideoByIdListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoHandlerGetVideoByIdListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetVideoByIdListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoHandlerGetVideoByIdListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoByIdList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoHandlerGetVideoByIdListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHandlerGetVideoByIdListResult(%+v)", *p)

}

func (p *VideoHandlerGetVideoByIdListResult) DeepEqual(ano *VideoHandlerGetVideoByIdListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoHandlerGetVideoByIdListResult) Field0DeepEqual(src *GetVideoByIdListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
