// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package chat

import (
	"bibi/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type MessageSaveRequest struct {
	TargetId int64  `thrift:"target_id,1" frugal:"1,default,i64" json:"target_id"`
	UserId   int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Content  string `thrift:"content,3" frugal:"3,default,string" json:"content"`
	IsOnline bool   `thrift:"is_online,4" frugal:"4,default,bool" json:"is_online"`
}

func NewMessageSaveRequest() *MessageSaveRequest {
	return &MessageSaveRequest{}
}

func (p *MessageSaveRequest) InitDefault() {
	*p = MessageSaveRequest{}
}

func (p *MessageSaveRequest) GetTargetId() (v int64) {
	return p.TargetId
}

func (p *MessageSaveRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *MessageSaveRequest) GetContent() (v string) {
	return p.Content
}

func (p *MessageSaveRequest) GetIsOnline() (v bool) {
	return p.IsOnline
}
func (p *MessageSaveRequest) SetTargetId(val int64) {
	p.TargetId = val
}
func (p *MessageSaveRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *MessageSaveRequest) SetContent(val string) {
	p.Content = val
}
func (p *MessageSaveRequest) SetIsOnline(val bool) {
	p.IsOnline = val
}

var fieldIDToName_MessageSaveRequest = map[int16]string{
	1: "target_id",
	2: "user_id",
	3: "content",
	4: "is_online",
}

func (p *MessageSaveRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MessageSaveRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MessageSaveRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TargetId = v
	}
	return nil
}
func (p *MessageSaveRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *MessageSaveRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}
func (p *MessageSaveRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOnline = v
	}
	return nil
}

func (p *MessageSaveRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageSaveRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MessageSaveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TargetId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MessageSaveRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MessageSaveRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MessageSaveRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_online", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsOnline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MessageSaveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageSaveRequest(%+v)", *p)

}

func (p *MessageSaveRequest) DeepEqual(ano *MessageSaveRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsOnline) {
		return false
	}
	return true
}

func (p *MessageSaveRequest) Field1DeepEqual(src int64) bool {

	if p.TargetId != src {
		return false
	}
	return true
}
func (p *MessageSaveRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *MessageSaveRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *MessageSaveRequest) Field4DeepEqual(src bool) bool {

	if p.IsOnline != src {
		return false
	}
	return true
}

type MessageSaveResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewMessageSaveResponse() *MessageSaveResponse {
	return &MessageSaveResponse{}
}

func (p *MessageSaveResponse) InitDefault() {
	*p = MessageSaveResponse{}
}

var MessageSaveResponse_Base_DEFAULT *base.BaseResp

func (p *MessageSaveResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return MessageSaveResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *MessageSaveResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_MessageSaveResponse = map[int16]string{
	1: "base",
}

func (p *MessageSaveResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MessageSaveResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MessageSaveResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MessageSaveResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MessageSaveResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageSaveResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MessageSaveResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MessageSaveResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageSaveResponse(%+v)", *p)

}

func (p *MessageSaveResponse) DeepEqual(ano *MessageSaveResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *MessageSaveResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type MessageRecordRequest struct {
	TargetId   int64  `thrift:"target_id,1" frugal:"1,default,i64" json:"target_id"`
	FromTime   string `thrift:"from_time,2" frugal:"2,default,string" json:"from_time"`
	ToTime     string `thrift:"to_time,3" frugal:"3,default,string" json:"to_time"`
	ActionType int64  `thrift:"action_type,4" frugal:"4,default,i64" json:"action_type"`
	PageNum    int64  `thrift:"page_num,5" frugal:"5,default,i64" json:"page_num"`
	UserId     int64  `thrift:"user_id,6" frugal:"6,default,i64" json:"user_id"`
}

func NewMessageRecordRequest() *MessageRecordRequest {
	return &MessageRecordRequest{}
}

func (p *MessageRecordRequest) InitDefault() {
	*p = MessageRecordRequest{}
}

func (p *MessageRecordRequest) GetTargetId() (v int64) {
	return p.TargetId
}

func (p *MessageRecordRequest) GetFromTime() (v string) {
	return p.FromTime
}

func (p *MessageRecordRequest) GetToTime() (v string) {
	return p.ToTime
}

func (p *MessageRecordRequest) GetActionType() (v int64) {
	return p.ActionType
}

func (p *MessageRecordRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *MessageRecordRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *MessageRecordRequest) SetTargetId(val int64) {
	p.TargetId = val
}
func (p *MessageRecordRequest) SetFromTime(val string) {
	p.FromTime = val
}
func (p *MessageRecordRequest) SetToTime(val string) {
	p.ToTime = val
}
func (p *MessageRecordRequest) SetActionType(val int64) {
	p.ActionType = val
}
func (p *MessageRecordRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *MessageRecordRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_MessageRecordRequest = map[int16]string{
	1: "target_id",
	2: "from_time",
	3: "to_time",
	4: "action_type",
	5: "page_num",
	6: "user_id",
}

func (p *MessageRecordRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MessageRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MessageRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TargetId = v
	}
	return nil
}
func (p *MessageRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FromTime = v
	}
	return nil
}
func (p *MessageRecordRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ToTime = v
	}
	return nil
}
func (p *MessageRecordRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActionType = v
	}
	return nil
}
func (p *MessageRecordRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *MessageRecordRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MessageRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MessageRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TargetId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MessageRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("from_time", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FromTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MessageRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_time", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ToTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MessageRecordRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ActionType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MessageRecordRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MessageRecordRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MessageRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageRecordRequest(%+v)", *p)

}

func (p *MessageRecordRequest) DeepEqual(ano *MessageRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FromTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.ToTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.ActionType) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *MessageRecordRequest) Field1DeepEqual(src int64) bool {

	if p.TargetId != src {
		return false
	}
	return true
}
func (p *MessageRecordRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FromTime, src) != 0 {
		return false
	}
	return true
}
func (p *MessageRecordRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ToTime, src) != 0 {
		return false
	}
	return true
}
func (p *MessageRecordRequest) Field4DeepEqual(src int64) bool {

	if p.ActionType != src {
		return false
	}
	return true
}
func (p *MessageRecordRequest) Field5DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *MessageRecordRequest) Field6DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type MessageRecordResponse struct {
	Base         *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	MessageCount int64           `thrift:"message_count,2" frugal:"2,default,i64" json:"message_count"`
	Record       []*base.Message `thrift:"record,3" frugal:"3,default,list<base.Message>" json:"record"`
}

func NewMessageRecordResponse() *MessageRecordResponse {
	return &MessageRecordResponse{}
}

func (p *MessageRecordResponse) InitDefault() {
	*p = MessageRecordResponse{}
}

var MessageRecordResponse_Base_DEFAULT *base.BaseResp

func (p *MessageRecordResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return MessageRecordResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *MessageRecordResponse) GetMessageCount() (v int64) {
	return p.MessageCount
}

func (p *MessageRecordResponse) GetRecord() (v []*base.Message) {
	return p.Record
}
func (p *MessageRecordResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *MessageRecordResponse) SetMessageCount(val int64) {
	p.MessageCount = val
}
func (p *MessageRecordResponse) SetRecord(val []*base.Message) {
	p.Record = val
}

var fieldIDToName_MessageRecordResponse = map[int16]string{
	1: "base",
	2: "message_count",
	3: "record",
}

func (p *MessageRecordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MessageRecordResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MessageRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MessageRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *MessageRecordResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MessageCount = v
	}
	return nil
}
func (p *MessageRecordResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Record = make([]*base.Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Record = append(p.Record, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MessageRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MessageRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MessageRecordResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message_count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MessageCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MessageRecordResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Record)); err != nil {
		return err
	}
	for _, v := range p.Record {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MessageRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageRecordResponse(%+v)", *p)

}

func (p *MessageRecordResponse) DeepEqual(ano *MessageRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.MessageCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.Record) {
		return false
	}
	return true
}

func (p *MessageRecordResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *MessageRecordResponse) Field2DeepEqual(src int64) bool {

	if p.MessageCount != src {
		return false
	}
	return true
}
func (p *MessageRecordResponse) Field3DeepEqual(src []*base.Message) bool {

	if len(p.Record) != len(src) {
		return false
	}
	for i, v := range p.Record {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type IsNotReadMessageRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewIsNotReadMessageRequest() *IsNotReadMessageRequest {
	return &IsNotReadMessageRequest{}
}

func (p *IsNotReadMessageRequest) InitDefault() {
	*p = IsNotReadMessageRequest{}
}

func (p *IsNotReadMessageRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *IsNotReadMessageRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_IsNotReadMessageRequest = map[int16]string{
	1: "user_id",
}

func (p *IsNotReadMessageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IsNotReadMessageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IsNotReadMessageRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *IsNotReadMessageRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsNotReadMessageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IsNotReadMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IsNotReadMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsNotReadMessageRequest(%+v)", *p)

}

func (p *IsNotReadMessageRequest) DeepEqual(ano *IsNotReadMessageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *IsNotReadMessageRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type IsNotReadMessageResponse struct {
	Base        *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Count       int64           `thrift:"count,2" frugal:"2,default,i64" json:"count"`
	MessageList []*base.Message `thrift:"message_list,3" frugal:"3,default,list<base.Message>" json:"message_list"`
}

func NewIsNotReadMessageResponse() *IsNotReadMessageResponse {
	return &IsNotReadMessageResponse{}
}

func (p *IsNotReadMessageResponse) InitDefault() {
	*p = IsNotReadMessageResponse{}
}

var IsNotReadMessageResponse_Base_DEFAULT *base.BaseResp

func (p *IsNotReadMessageResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return IsNotReadMessageResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *IsNotReadMessageResponse) GetCount() (v int64) {
	return p.Count
}

func (p *IsNotReadMessageResponse) GetMessageList() (v []*base.Message) {
	return p.MessageList
}
func (p *IsNotReadMessageResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *IsNotReadMessageResponse) SetCount(val int64) {
	p.Count = val
}
func (p *IsNotReadMessageResponse) SetMessageList(val []*base.Message) {
	p.MessageList = val
}

var fieldIDToName_IsNotReadMessageResponse = map[int16]string{
	1: "base",
	2: "count",
	3: "message_list",
}

func (p *IsNotReadMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *IsNotReadMessageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IsNotReadMessageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IsNotReadMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *IsNotReadMessageResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}
func (p *IsNotReadMessageResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MessageList = make([]*base.Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MessageList = append(p.MessageList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *IsNotReadMessageResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsNotReadMessageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IsNotReadMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IsNotReadMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IsNotReadMessageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageList)); err != nil {
		return err
	}
	for _, v := range p.MessageList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *IsNotReadMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsNotReadMessageResponse(%+v)", *p)

}

func (p *IsNotReadMessageResponse) DeepEqual(ano *IsNotReadMessageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.MessageList) {
		return false
	}
	return true
}

func (p *IsNotReadMessageResponse) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *IsNotReadMessageResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}
func (p *IsNotReadMessageResponse) Field3DeepEqual(src []*base.Message) bool {

	if len(p.MessageList) != len(src) {
		return false
	}
	for i, v := range p.MessageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChatHandler interface {
	MessageSave(ctx context.Context, req *MessageSaveRequest) (r *MessageSaveResponse, err error)

	MessageRecord(ctx context.Context, req *MessageRecordRequest) (r *MessageRecordResponse, err error)

	IsNotReadMessage(ctx context.Context, req *IsNotReadMessageRequest) (r *IsNotReadMessageResponse, err error)
}

type ChatHandlerClient struct {
	c thrift.TClient
}

func NewChatHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ChatHandlerClient {
	return &ChatHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewChatHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ChatHandlerClient {
	return &ChatHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewChatHandlerClient(c thrift.TClient) *ChatHandlerClient {
	return &ChatHandlerClient{
		c: c,
	}
}

func (p *ChatHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *ChatHandlerClient) MessageSave(ctx context.Context, req *MessageSaveRequest) (r *MessageSaveResponse, err error) {
	var _args ChatHandlerMessageSaveArgs
	_args.Req = req
	var _result ChatHandlerMessageSaveResult
	if err = p.Client_().Call(ctx, "MessageSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ChatHandlerClient) MessageRecord(ctx context.Context, req *MessageRecordRequest) (r *MessageRecordResponse, err error) {
	var _args ChatHandlerMessageRecordArgs
	_args.Req = req
	var _result ChatHandlerMessageRecordResult
	if err = p.Client_().Call(ctx, "MessageRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ChatHandlerClient) IsNotReadMessage(ctx context.Context, req *IsNotReadMessageRequest) (r *IsNotReadMessageResponse, err error) {
	var _args ChatHandlerIsNotReadMessageArgs
	_args.Req = req
	var _result ChatHandlerIsNotReadMessageResult
	if err = p.Client_().Call(ctx, "IsNotReadMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ChatHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ChatHandler
}

func (p *ChatHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ChatHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ChatHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewChatHandlerProcessor(handler ChatHandler) *ChatHandlerProcessor {
	self := &ChatHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("MessageSave", &chatHandlerProcessorMessageSave{handler: handler})
	self.AddToProcessorMap("MessageRecord", &chatHandlerProcessorMessageRecord{handler: handler})
	self.AddToProcessorMap("IsNotReadMessage", &chatHandlerProcessorIsNotReadMessage{handler: handler})
	return self
}
func (p *ChatHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type chatHandlerProcessorMessageSave struct {
	handler ChatHandler
}

func (p *chatHandlerProcessorMessageSave) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatHandlerMessageSaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MessageSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatHandlerMessageSaveResult{}
	var retval *MessageSaveResponse
	if retval, err2 = p.handler.MessageSave(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MessageSave: "+err2.Error())
		oprot.WriteMessageBegin("MessageSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MessageSave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type chatHandlerProcessorMessageRecord struct {
	handler ChatHandler
}

func (p *chatHandlerProcessorMessageRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatHandlerMessageRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MessageRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatHandlerMessageRecordResult{}
	var retval *MessageRecordResponse
	if retval, err2 = p.handler.MessageRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MessageRecord: "+err2.Error())
		oprot.WriteMessageBegin("MessageRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MessageRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type chatHandlerProcessorIsNotReadMessage struct {
	handler ChatHandler
}

func (p *chatHandlerProcessorIsNotReadMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatHandlerIsNotReadMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IsNotReadMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatHandlerIsNotReadMessageResult{}
	var retval *IsNotReadMessageResponse
	if retval, err2 = p.handler.IsNotReadMessage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNotReadMessage: "+err2.Error())
		oprot.WriteMessageBegin("IsNotReadMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IsNotReadMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ChatHandlerMessageSaveArgs struct {
	Req *MessageSaveRequest `thrift:"req,1" frugal:"1,default,MessageSaveRequest" json:"req"`
}

func NewChatHandlerMessageSaveArgs() *ChatHandlerMessageSaveArgs {
	return &ChatHandlerMessageSaveArgs{}
}

func (p *ChatHandlerMessageSaveArgs) InitDefault() {
	*p = ChatHandlerMessageSaveArgs{}
}

var ChatHandlerMessageSaveArgs_Req_DEFAULT *MessageSaveRequest

func (p *ChatHandlerMessageSaveArgs) GetReq() (v *MessageSaveRequest) {
	if !p.IsSetReq() {
		return ChatHandlerMessageSaveArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatHandlerMessageSaveArgs) SetReq(val *MessageSaveRequest) {
	p.Req = val
}

var fieldIDToName_ChatHandlerMessageSaveArgs = map[int16]string{
	1: "req",
}

func (p *ChatHandlerMessageSaveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatHandlerMessageSaveArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerMessageSaveArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerMessageSaveArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMessageSaveRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerMessageSaveArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageSave_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerMessageSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatHandlerMessageSaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerMessageSaveArgs(%+v)", *p)

}

func (p *ChatHandlerMessageSaveArgs) DeepEqual(ano *ChatHandlerMessageSaveArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatHandlerMessageSaveArgs) Field1DeepEqual(src *MessageSaveRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatHandlerMessageSaveResult struct {
	Success *MessageSaveResponse `thrift:"success,0,optional" frugal:"0,optional,MessageSaveResponse" json:"success,omitempty"`
}

func NewChatHandlerMessageSaveResult() *ChatHandlerMessageSaveResult {
	return &ChatHandlerMessageSaveResult{}
}

func (p *ChatHandlerMessageSaveResult) InitDefault() {
	*p = ChatHandlerMessageSaveResult{}
}

var ChatHandlerMessageSaveResult_Success_DEFAULT *MessageSaveResponse

func (p *ChatHandlerMessageSaveResult) GetSuccess() (v *MessageSaveResponse) {
	if !p.IsSetSuccess() {
		return ChatHandlerMessageSaveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatHandlerMessageSaveResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageSaveResponse)
}

var fieldIDToName_ChatHandlerMessageSaveResult = map[int16]string{
	0: "success",
}

func (p *ChatHandlerMessageSaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatHandlerMessageSaveResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerMessageSaveResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerMessageSaveResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageSaveResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerMessageSaveResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageSave_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerMessageSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatHandlerMessageSaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerMessageSaveResult(%+v)", *p)

}

func (p *ChatHandlerMessageSaveResult) DeepEqual(ano *ChatHandlerMessageSaveResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatHandlerMessageSaveResult) Field0DeepEqual(src *MessageSaveResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ChatHandlerMessageRecordArgs struct {
	Req *MessageRecordRequest `thrift:"req,1" frugal:"1,default,MessageRecordRequest" json:"req"`
}

func NewChatHandlerMessageRecordArgs() *ChatHandlerMessageRecordArgs {
	return &ChatHandlerMessageRecordArgs{}
}

func (p *ChatHandlerMessageRecordArgs) InitDefault() {
	*p = ChatHandlerMessageRecordArgs{}
}

var ChatHandlerMessageRecordArgs_Req_DEFAULT *MessageRecordRequest

func (p *ChatHandlerMessageRecordArgs) GetReq() (v *MessageRecordRequest) {
	if !p.IsSetReq() {
		return ChatHandlerMessageRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatHandlerMessageRecordArgs) SetReq(val *MessageRecordRequest) {
	p.Req = val
}

var fieldIDToName_ChatHandlerMessageRecordArgs = map[int16]string{
	1: "req",
}

func (p *ChatHandlerMessageRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatHandlerMessageRecordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerMessageRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerMessageRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMessageRecordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerMessageRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerMessageRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatHandlerMessageRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerMessageRecordArgs(%+v)", *p)

}

func (p *ChatHandlerMessageRecordArgs) DeepEqual(ano *ChatHandlerMessageRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatHandlerMessageRecordArgs) Field1DeepEqual(src *MessageRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatHandlerMessageRecordResult struct {
	Success *MessageRecordResponse `thrift:"success,0,optional" frugal:"0,optional,MessageRecordResponse" json:"success,omitempty"`
}

func NewChatHandlerMessageRecordResult() *ChatHandlerMessageRecordResult {
	return &ChatHandlerMessageRecordResult{}
}

func (p *ChatHandlerMessageRecordResult) InitDefault() {
	*p = ChatHandlerMessageRecordResult{}
}

var ChatHandlerMessageRecordResult_Success_DEFAULT *MessageRecordResponse

func (p *ChatHandlerMessageRecordResult) GetSuccess() (v *MessageRecordResponse) {
	if !p.IsSetSuccess() {
		return ChatHandlerMessageRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatHandlerMessageRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRecordResponse)
}

var fieldIDToName_ChatHandlerMessageRecordResult = map[int16]string{
	0: "success",
}

func (p *ChatHandlerMessageRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatHandlerMessageRecordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerMessageRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerMessageRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRecordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerMessageRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerMessageRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatHandlerMessageRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerMessageRecordResult(%+v)", *p)

}

func (p *ChatHandlerMessageRecordResult) DeepEqual(ano *ChatHandlerMessageRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatHandlerMessageRecordResult) Field0DeepEqual(src *MessageRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ChatHandlerIsNotReadMessageArgs struct {
	Req *IsNotReadMessageRequest `thrift:"req,1" frugal:"1,default,IsNotReadMessageRequest" json:"req"`
}

func NewChatHandlerIsNotReadMessageArgs() *ChatHandlerIsNotReadMessageArgs {
	return &ChatHandlerIsNotReadMessageArgs{}
}

func (p *ChatHandlerIsNotReadMessageArgs) InitDefault() {
	*p = ChatHandlerIsNotReadMessageArgs{}
}

var ChatHandlerIsNotReadMessageArgs_Req_DEFAULT *IsNotReadMessageRequest

func (p *ChatHandlerIsNotReadMessageArgs) GetReq() (v *IsNotReadMessageRequest) {
	if !p.IsSetReq() {
		return ChatHandlerIsNotReadMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatHandlerIsNotReadMessageArgs) SetReq(val *IsNotReadMessageRequest) {
	p.Req = val
}

var fieldIDToName_ChatHandlerIsNotReadMessageArgs = map[int16]string{
	1: "req",
}

func (p *ChatHandlerIsNotReadMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatHandlerIsNotReadMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerIsNotReadMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewIsNotReadMessageRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerIsNotReadMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsNotReadMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerIsNotReadMessageArgs(%+v)", *p)

}

func (p *ChatHandlerIsNotReadMessageArgs) DeepEqual(ano *ChatHandlerIsNotReadMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatHandlerIsNotReadMessageArgs) Field1DeepEqual(src *IsNotReadMessageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatHandlerIsNotReadMessageResult struct {
	Success *IsNotReadMessageResponse `thrift:"success,0,optional" frugal:"0,optional,IsNotReadMessageResponse" json:"success,omitempty"`
}

func NewChatHandlerIsNotReadMessageResult() *ChatHandlerIsNotReadMessageResult {
	return &ChatHandlerIsNotReadMessageResult{}
}

func (p *ChatHandlerIsNotReadMessageResult) InitDefault() {
	*p = ChatHandlerIsNotReadMessageResult{}
}

var ChatHandlerIsNotReadMessageResult_Success_DEFAULT *IsNotReadMessageResponse

func (p *ChatHandlerIsNotReadMessageResult) GetSuccess() (v *IsNotReadMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatHandlerIsNotReadMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatHandlerIsNotReadMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*IsNotReadMessageResponse)
}

var fieldIDToName_ChatHandlerIsNotReadMessageResult = map[int16]string{
	0: "success",
}

func (p *ChatHandlerIsNotReadMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatHandlerIsNotReadMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatHandlerIsNotReadMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewIsNotReadMessageResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatHandlerIsNotReadMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsNotReadMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatHandlerIsNotReadMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatHandlerIsNotReadMessageResult(%+v)", *p)

}

func (p *ChatHandlerIsNotReadMessageResult) DeepEqual(ano *ChatHandlerIsNotReadMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatHandlerIsNotReadMessageResult) Field0DeepEqual(src *IsNotReadMessageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
