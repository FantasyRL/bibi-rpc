// Code generated by Kitex v0.9.1. DO NOT EDIT.

package chathandler

import (
	chat "bibi/kitex_gen/chat"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MessageSave": kitex.NewMethodInfo(
		messageSaveHandler,
		newChatHandlerMessageSaveArgs,
		newChatHandlerMessageSaveResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MessageRecord": kitex.NewMethodInfo(
		messageRecordHandler,
		newChatHandlerMessageRecordArgs,
		newChatHandlerMessageRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IsNotReadMessage": kitex.NewMethodInfo(
		isNotReadMessageHandler,
		newChatHandlerIsNotReadMessageArgs,
		newChatHandlerIsNotReadMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	chatHandlerServiceInfo                = NewServiceInfo()
	chatHandlerServiceInfoForClient       = NewServiceInfoForClient()
	chatHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chatHandlerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chatHandlerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chatHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ChatHandler"
	handlerType := (*chat.ChatHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func messageSaveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatHandlerMessageSaveArgs)
	realResult := result.(*chat.ChatHandlerMessageSaveResult)
	success, err := handler.(chat.ChatHandler).MessageSave(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatHandlerMessageSaveArgs() interface{} {
	return chat.NewChatHandlerMessageSaveArgs()
}

func newChatHandlerMessageSaveResult() interface{} {
	return chat.NewChatHandlerMessageSaveResult()
}

func messageRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatHandlerMessageRecordArgs)
	realResult := result.(*chat.ChatHandlerMessageRecordResult)
	success, err := handler.(chat.ChatHandler).MessageRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatHandlerMessageRecordArgs() interface{} {
	return chat.NewChatHandlerMessageRecordArgs()
}

func newChatHandlerMessageRecordResult() interface{} {
	return chat.NewChatHandlerMessageRecordResult()
}

func isNotReadMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatHandlerIsNotReadMessageArgs)
	realResult := result.(*chat.ChatHandlerIsNotReadMessageResult)
	success, err := handler.(chat.ChatHandler).IsNotReadMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatHandlerIsNotReadMessageArgs() interface{} {
	return chat.NewChatHandlerIsNotReadMessageArgs()
}

func newChatHandlerIsNotReadMessageResult() interface{} {
	return chat.NewChatHandlerIsNotReadMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageSave(ctx context.Context, req *chat.MessageSaveRequest) (r *chat.MessageSaveResponse, err error) {
	var _args chat.ChatHandlerMessageSaveArgs
	_args.Req = req
	var _result chat.ChatHandlerMessageSaveResult
	if err = p.c.Call(ctx, "MessageSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageRecord(ctx context.Context, req *chat.MessageRecordRequest) (r *chat.MessageRecordResponse, err error) {
	var _args chat.ChatHandlerMessageRecordArgs
	_args.Req = req
	var _result chat.ChatHandlerMessageRecordResult
	if err = p.c.Call(ctx, "MessageRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsNotReadMessage(ctx context.Context, req *chat.IsNotReadMessageRequest) (r *chat.IsNotReadMessageResponse, err error) {
	var _args chat.ChatHandlerIsNotReadMessageArgs
	_args.Req = req
	var _result chat.ChatHandlerIsNotReadMessageResult
	if err = p.c.Call(ctx, "IsNotReadMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
