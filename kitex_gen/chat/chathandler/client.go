// Code generated by Kitex v0.9.1. DO NOT EDIT.

package chathandler

import (
	chat "bibi/kitex_gen/chat"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	MessageSave(ctx context.Context, req *chat.MessageSaveRequest, callOptions ...callopt.Option) (r *chat.MessageSaveResponse, err error)
	MessageRecord(ctx context.Context, req *chat.MessageRecordRequest, callOptions ...callopt.Option) (r *chat.MessageRecordResponse, err error)
	IsNotReadMessage(ctx context.Context, req *chat.IsNotReadMessageRequest, callOptions ...callopt.Option) (r *chat.IsNotReadMessageResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kChatHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kChatHandlerClient struct {
	*kClient
}

func (p *kChatHandlerClient) MessageSave(ctx context.Context, req *chat.MessageSaveRequest, callOptions ...callopt.Option) (r *chat.MessageSaveResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageSave(ctx, req)
}

func (p *kChatHandlerClient) MessageRecord(ctx context.Context, req *chat.MessageRecordRequest, callOptions ...callopt.Option) (r *chat.MessageRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageRecord(ctx, req)
}

func (p *kChatHandlerClient) IsNotReadMessage(ctx context.Context, req *chat.IsNotReadMessageRequest, callOptions ...callopt.Option) (r *chat.IsNotReadMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsNotReadMessage(ctx, req)
}
