// Code generated by hertz generator.

package api

import (
	"bibi/api/biz/rpc"
	"bibi/kitex_gen/user"
	"bibi/pkg/errno"
	"bibi/pkg/pack"
	"context"

	api "bibi/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @Summary Register
// @Description userRegister
// @Accept json/form
// @Produce json
// @Param username query string true "用户名"
// @Param email query string true "邮箱"
// @Param password query string true "密码"
// @router /bibi/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResponse)

	rpcResp, err := rpc.UserRegister(ctx, &user.RegisterRequest{
		Username: req.Username,
		Email:    req.Email,
		Password: req.Password,
	})
	if err != nil {
		pack.SendRPCFailResp(c, err)
		return
	}

	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.UserID = rpcResp.UserId
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @Summary Login
// @Description login to get your auth token
// @Accept json/form
// @Produce json
// @Param username query string true "用户名"
// @Param password query string true "密码"
// @Param otp query string false "otp"
// @router /bibi/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	resp := new(api.LoginResponse)

	resp.Base = pack.ConvertToAPIBaseResp(pack.BuildBaseResp(nil))
	//hertz jwt(mw)
	v1, _ := c.Get("user")
	resp.User = pack.ToUserResp(v1)
	//hertz jwt(mw)
	v2, _ := c.Get("token")
	token := v2.(string)
	resp.Token = &token

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @router /bibi/user/ [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.InfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// Avatar .
// @router /bibi/user/avatar/upload [PUT]
func Avatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AvatarRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AvatarResponse)

	c.JSON(consts.StatusOK, resp)
}

// Switch2FA .
// @Summary switch_2fa
// @Description switch on/off 2fa mode
// @Accept json/form
// @Produce json
// @Param action_type query int true "关闭:0;开启:1"
// @Param totp query string false "totp"
// @Param Authorization header string true "token"
// @router /bibi/user/switch2fa [POST]
func Switch2FA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.Switch2FARequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.Switch2FAResponse)

	c.JSON(consts.StatusOK, resp)
}
