// Code generated by hertz generator.

package api

import (
	"bibi/api/biz/rpc"
	"bibi/kitex_gen/video"
	"bibi/pkg/errno"
	"bibi/pkg/pack"
	"context"
	"path/filepath"

	api "bibi/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PutVideo .
// @Summary PutVideo
// @Description put video
// @Accept json/form
// @Produce json
// @Param video_file formData file true "视频文件"
// @Param title query string true "标题"
// @Param cover formData file true "视频封面"
// @Param access-token header string false "access-token"
// @Param refresh-token header string false "refresh-token"
// @router /bibi/video/upload [POST]
func PutVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PutVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	videoFile, err := c.FormFile("video_file")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cover, err := c.FormFile("cover")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PutVideoResponse)

	videoExt := filepath.Ext(videoFile.Filename)
	allowExtVideo := map[string]bool{
		".mp4": true,
	}
	if !pack.IsAllowExt(videoExt, allowExtVideo) {
		resp.Base = pack.ConvertToAPIBaseResp(pack.BuildBaseResp(errno.ParamError))
		c.JSON(consts.StatusOK, resp)
		return
	}
	coverExt := filepath.Ext(cover.Filename)
	allowExtCover := map[string]bool{
		".jpg":  true,
		".png":  true,
		".jpeg": true,
	}
	if !pack.IsAllowExt(coverExt, allowExtCover) {
		resp.Base = pack.ConvertToAPIBaseResp(pack.BuildBaseResp(errno.ParamError))
		c.JSON(consts.StatusOK, resp)
		return
	}

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	videoByte, err := pack.FileToByte(videoFile)
	if err != nil {
		resp.Base = pack.ConvertToAPIBaseResp(pack.BuildBaseResp(errno.ParamError))
		c.JSON(consts.StatusOK, resp)
		return
	}
	coverByte, err := pack.FileToByte(cover)
	if err != nil {
		resp.Base = pack.ConvertToAPIBaseResp(pack.BuildBaseResp(errno.ParamError))
		c.JSON(consts.StatusOK, resp)
		return
	}

	rpcResp, err := rpc.VideoUpload(ctx, &video.PutVideoRequest{
		UserId:    id,
		VideoFile: videoByte,
		Title:     req.Title,
		Cover:     coverByte,
	})
	if err != nil {
		pack.SendRPCFailResp(c, err)
	}
	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	c.JSON(consts.StatusOK, resp)
}

// ListVideo .
// @Summary ListVideo
// @Description list user's videos
// @Accept json/form
// @Produce json
// @Param page_num query int64 true "页码"
// @Param access-token header string false "access-token"
// @Param refresh-token header string false "refresh-token"
// @router /bibi/video/published [GET]
func ListVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListUserVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ListUserVideoResponse)

	v, _ := c.Get("current_user_id")
	id := v.(int64)
	rpcResp, err := rpc.UserVideoList(ctx, &video.ListUserVideoRequest{
		UserId:  id,
		PageNum: req.PageNum,
	})
	if err != nil {
		pack.SendRPCFailResp(c, err)
	}

	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.VideoList = pack.ConvertToAPIVideos(rpcResp.VideoList)
	resp.Count = rpcResp.Count
	c.JSON(consts.StatusOK, resp)
}

// SearchVideo .
// @Summary SearchVideo
// @Description search videos
// @Accept json/form
// @Produce json
// @Param page_num query int true "页码"
// @Param param query string true "搜索内容"
// @router /bibi/video/search [POST]
func SearchVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.SearchVideoResponse)

	rpcResp, err := rpc.VideoSearch(ctx, &video.SearchVideoRequest{
		PageNum: req.PageNum,
		Param:   req.Param,
	})
	if err != nil {
		pack.SendRPCFailResp(c, err)
	}

	resp.Base = pack.ConvertToAPIBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.VideoList = pack.ConvertToAPIVideos(rpcResp.VideoList)
	resp.Count = rpcResp.Count
	c.JSON(consts.StatusOK, resp)
}

// HotVideo .
// @router /bibi/video/hot [GET]
func HotVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.HotVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.HotVideoResponse)

	c.JSON(consts.StatusOK, resp)
}
